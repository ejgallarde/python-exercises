Exercise 4 - String Handling

 Objective:
   To consolidate string manipulation in Python. This includes further practise at general
   Python constructs, such as loops.

 Questions:

   1. Open the script sep.py in a text editor. You'll see a string defined called
   ‘Belgium’. Add code to print:
        a. A line of hyphens the same length as the Belgium string, followed by
        b. the string with the comma separators replaced by colons", followed by
        c. the population of Belgium (the second field) plus the population of the
        capital city (the fourth field). Hint: the answer should be 11183818.
        d. Another line of hyphens the same length as the Belgium string.

   2. In this exercise, much of the code has been written for you! Open the script
   greek.py in IDLE and run it there (use <F5>) — do not use Windows cmd.exe
   because the character set used cannot handle the Greek characters.

   The try and except blocks are examples of exception handling in case it is run
   under cmd.exe — we will cover these later in the course.

   The script has a list of names for the characters in the Greek alphabet, and it
   displays each one within a loop. The character itself is generated using the chr()
   built-in function (look it up if you're curious). Within Unicode, Greek lowercase
   characters start at position 0x03bl (alpha).

    Currently, the output is a bit messy and insipid, like this:

        Alpha: α
        Beta: β
        Gamma: γ
        Delta: δ
        Epsilon: ε
        Zeta: ζ
        Eta: η

   The task in this question is to replace the existing print function with another
   (using format) which displays for each character:

    The hex value of the character (pos)
    The character name (cname), left justified, maximum 12 characters
    A colon separator
    The lowercase Greek character (char)
    The uppercase Greek character
    Your output should look something like this:

        Ox3bl Alpha Α α
        Ox3b2 Beta Β β
        0x3b3 Gamma Γ γ
        Ox3b4 Delta Δ δ
        Ox3bs Epsilon Ε ε
        Ox3b6 Zeta Ζ ζ
        Ox3b7 Eta Η η
        and so on.


   3. Examine the file messier.txt in the labs directory, which contains details of
   celestial "Messier" objects. It consists of several columns for each object,
   identified by the 'M' number. The columns are as follows:

        MessierNumber CommonName ObjectType Constellation

   Note that many have no common name. Read the file using a for loop:

   for line in open('messier.txt', encoding="latin_I"):
   if not line: break
   # The text is in the variable named line

   Ignore lines that do not start with 'M'. Print the fields from each line delimited
   with '|' characters, Where there is no common name, use 'no name’. Ignore any
   lines not beginning with a Messier number. For example:

        |M1|The Crab Nebula|Supernova remnant|Taurus|
        |M2|no name|CGlobular cluster|Aguarius|
        |M3|no name|Globular cluster|Canes Venatici|

    Hint: the header on the file should assist in getting the field positions.